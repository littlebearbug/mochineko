name: Build and Deploy Next.js to Server

on:
  push:
    branches:
      - main

jobs:
  # 新增的 Job：专门用于测试 SSH 连接
  test-connection:
    name: Test SSH Connection
    runs-on: ubuntu-latest

    steps:
      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          # 执行一个非常简单的命令，比如 'ls -l' 或 'echo'
          # 如果命令成功执行，说明连接、认证全部通过
          script: |
            echo "✅ Connection successful!"
            echo "Current user is: $(whoami)"
            echo "Current directory is: $(pwd)"
            ls -l

  # 你原有的 Job：现在依赖于 test-connection 的成功
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test-connection # 关键：确保 test-connection 成功后才运行此 Job

    steps:
      # 步骤 1: 检出你的代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 步骤 2: 安装 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      # 步骤 3: 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      # 步骤 4: 安装依赖
      - name: Install Dependencies
        run: pnpm install

      # 步骤 5: 构建静态站点
      - name: Build Static Site
        run: pnpm run build

      # 新增的调试步骤：检查构建产物是否存在
      - name: Verify Build Output
        run: |
          echo "Listing files in the current directory..."
          ls -l
          echo "---"
          echo "Checking if 'out' directory exists and listing its contents..."
          if [ -d "out" ]; then
            ls -R out
          else
            echo "Error: 'out' directory not found!"
            exit 1
          fi

      # 步骤 6: 使用 rsync 部署到服务器
      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@v5.0.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_PORT: ${{ secrets.SSH_PORT }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          SOURCE: "out/"
          TARGET: ${{ secrets.DEPLOY_PATH }}
          EXCLUDE: "/.git/, /.github/"
          ARGS: "-rltgoDzv --delete"
