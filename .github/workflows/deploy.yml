name: Build and Deploy Next.js to Server

# 触发条件：当有代码 push 到 main 分支时
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虚拟机

    steps:
      # 步骤 1: 检出你的代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 步骤 2 (新增): 安装 pnpm
      # 这是最关键的修复步骤，必须在 setup-node 之前
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8 # 或者您正在使用的 pnpm 版本

      # 步骤 3: 设置 Node.js 环境
      # 它会自动找到由上一步安装的 pnpm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm' # 这里的 'pnpm' 缓存设置是正确的

      # 步骤 4: 安装依赖 
      - name: Install Dependencies
        run: pnpm install 

      # 步骤 5: 构建静态站点
      - name: Build Static Site
        run: pnpm run build

      # 步骤 6 (替代方案): 打包构建产物
      - name: Compress build output
        run: tar -zcvf build.tar.gz out/

      # 步骤 7 (替代方案): 使用 SCP 部署到服务器并解压
      - name: Deploy to Server via SCP
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "build.tar.gz" # 要上传的文件
          target: ${{ secrets.DEPLOY_PATH }} # 上传到目标目录

      # 步骤 8 (替代方案): 在服务器上解压和清理
      - name: Unpack and Cleanup on Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            tar -zxvf build.tar.gz --strip-components=1 -C . # 解压到当前目录并移除顶层out/目录
            rm build.tar.gz # 删除压缩包